#!/bin/bash

set -e

BASEDIR="$(readlink -f $(dirname "$0"))"
PROFILE="$1"
readonly BASEDIR PROFILE

panick () {
    local mesg=$1; shift
    printf "==> ERROR: ${mesg}\n" "$@" >&2
    exit 1
}

msg() {
    local mesg=$1; shift
    printf "==> ${mesg}\n" "$@" >&2
}

check_subvolume () {
    local subvol=$1

    if [ -d "$subvol" ]; then
        btrfs subvol show $subvol >/dev/null 2>&1
        if [ $? -ne 0 ]; then
            panick "$subvol exist but not a btrfs subvolume!"
        fi
    else
        btrfs subvolume create $subvol \
            || panick "Failed to create subvolume $subvol"
    fi
}

check_storage () {
    if [[ $(stat -f -c %T "$STORAGE") != "btrfs" ]]; then
        panick "Backup storage is not on a btrfs partition!"
    else
        check_subvolume "$STORAGE/$PROFILE"
        check_subvolume "$STORAGE/$PROFILE/current"
    fi
}

list_snapshots () {
    subvol=$1
    btrfs sub show $1 \
        | awk 'f;/\tSnapshot\(s\):/{f=1}' \
        | while read s; do echo ${s##*/}; done
}

list_l_snap () {
    list_snapshots "$1" | grep "^L_" | sort -t_ -k2 -n
}

list_s_snap () {
    list_snapshots "$1" | grep "^S_" | sort -t_ -k2 -n
}

parse_profile () {
    # common.conf: common config that applies to all backup profiles
    [ -f "${BASEDIR}/common.conf" ] && . "${BASEDIR}/common.conf"
    unset server srcdir

    local profile_conf="${BASEDIR}/profiles/${PROFILE}.conf"

    if [ -f $profile_conf ]; then
        source $profile_conf

        if [ -z "$SERVER" ] ||  [ -z "$USER" ] || \
           [ -z "$SRC" ] || [ -z "$STORAGE" ]; then
            panick "Backup profile invalid!"
        fi
    else
        panick "Backup profile not found!"
    fi

    SSH_KEY=${SSH_KEY:-"${BASEDIR}/keys/${USER}@${SERVER}"}
    [ -f "$SSH_KEY" ] || panick "SSH key not found at ${SSH_KEY}!"

    LOG_DIR=${LOG_DIR:-"${BASEDIR}/log/${PROFILE}/"}
    mkdir -p $LOG_DIR

    RSYNC_OPTS=${RSYNC_OPTS:-"-aHAX --timeout 3600 --delete"}
    RSH_CMD=${RSH_CMD:-"ssh -i $SSH_KEY"}

    KEEP_DAYS=${KEEP_DAYS:-"30"}
    KEEP_LONG_COUNT=${KEEP_LONG_COUNT:-"4"}
}

[[ $(whoami) != 'root' ]] && panick "Please run as root!"
parse_profile 
check_storage

SYNC_TO="${STORAGE}/${PROFILE}"
EPOCH=$(date +%s)

# RSYNC from server~
rsync -e "$RSH_CMD" $RSYNC_OPTS --log-file "${LOG_DIR}/rsync.log" \
         "${USER}@${SERVER}:${SRC}/" "${SYNC_TO}/current/"

# Create snapshot
lastest_l_snap=$(list_l_snap "${SYNC_TO}/current" | tail -n1)
lastest_l_snap=${lastest_l_snap:-"L_0"}
if [ $((${lastest_l_snap#L_}+$((KEEP_DAYS*86400)))) -lt $EPOCH ] \
        && [ $KEEP_LONG_COUNT -gt 0 ]; then
    btrfs subvol snapshot -r "${SYNC_TO}/current" "${SYNC_TO}/L_$EPOCH"
else
    btrfs subvol snapshot -r "${SYNC_TO}/current" "${SYNC_TO}/S_$EPOCH"
fi

# Clean long-time snapshots
list_l_snap "${SYNC_TO}/current" \
    | head -n-${KEEP_LONG_COUNT} \
        | while read subvol; do
    msg "Delete old backup ${subvol}."
    btrfs subvolume delete "${SYNC_TO}/${subvol}"
done

# Clean short-time snapshots
list_s_snap "${SYNC_TO}/current" | while read subvol; do
    if [ ${subvol#S_} -lt $((EPOCH-$((KEEP_DAYS*86400)))) ]; then
        msg "Delete old backup ${subvol}."
        btrfs subvolume delete "${SYNC_TO}/${subvol}"
    fi
done

