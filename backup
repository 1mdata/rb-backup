#!/bin/bash

set -e

BASEDIR="$(readlink -f $(dirname "$0"))"
PROFILE="$1"
readonly BASEDIR PROFILE


panick () {
    local mesg=$1; shift
    printf "==> ERROR: ${mesg}\n" "$@" >&2
    exit 1
}

msg() {
    local mesg=$1; shift
    printf "==> ${mesg}\n" "$@" >&2
}

check_subvolume () {
    local subvol=$1

    if [ -d "$subvol" ]; then
        btrfs subvol show $subvol >/dev/null 2>&1
        if [ $? -ne 0 ]; then
            panick "$subvol exist but not a btrfs subvolume!"
        fi
    else
        btrfs subvolume create $subvol \
            || panick "Failed to create subvolume $subvol"
    fi
}

check_storage () {
    if [[ $(stat -f -c %T "${conf[STORAGE]}") != "btrfs" ]]; then
        panick "Backup storage is not on a btrfs partition!"
    else
        check_subvolume "${conf[STORAGE]}/$PROFILE"
        check_subvolume "${conf[STORAGE]}/$PROFILE/current"
    fi
}

list_snapshots () {
    subvol=$1
    btrfs sub show $1 \
        | awk 'f;/\tSnapshot\(s\):/{f=1}' \
        | while read s; do echo ${s##*/}; done
}

list_l_snap () {
    list_snapshots "$1" | grep "^L_" | sort -t_ -k2 -n
}

list_s_snap () {
    list_snapshots "$1" | grep "^S_" | sort -t_ -k2 -n
}

parse_profile () {
    local common_conf="${BASEDIR}/common.conf"
    local profile_conf="${BASEDIR}/profiles/${PROFILE}.conf"
    local demand_opts=('SERVER' 'USER' 'SRC' 'STORAGE')

    declare -g -A conf

    if [ -f $profile_conf ]; then
        while read line; do
            local key=${line%%=*} value=${line#*=}
            conf[$key]="$value"
        done < <( \
            [ -f "$common_conf" ] && cat "$common_conf" \
            cat $profile_conf
        )

        for key in ${demand_opts[@]}; do
            [ -z ${conf[$key]} ] && panick "Backup profile invalid!"
        done
    else
        panick "Backup profile not found!"
    fi

    fallback_conf () {
        local key=$1 value=$2
        conf["$1"]=${conf["$1"]:-"$2"}
    }

    fallback_conf SSH_KEY "${BASEDIR}/keys/${conf[USER]}@${conf[SERVER]}"
    [ -f "${conf["SSH_KEY"]}" ] || panick "SSH key not found!"

    fallback_conf LOG_DIR "${BASEDIR}/log/${PROFILE}/"
    mkdir -p ${conf["LOG_DIR"]}

    fallback_conf RSYNC_OPTS '-aHAX --timeout 3600 --delete'
    fallback_conf RSH_CMD "ssh -i ${conf[SSH_KEY]}"
    fallback_conf KEEP_DAYS 30
    fallback_conf KEEP_LONG_COUNT 4
}

[[ $(whoami) != 'root' ]] && panick "Please run as root!"

parse_profile 
check_storage

SYNC_TO="${conf[STORAGE]}/${PROFILE}"
EPOCH=$(date +%s)
KEEP_SECONDS="$((conf[KEEP_DAYS]*86400))"

# RSYNC from server~
rsync -e "${conf[RSH_CMD]}" ${conf[RSYNC_OPTS]} \
      --log-file "${conf[LOG_DIR]}/rsync.log" \
      "${conf[USER]}@${conf[SERVER]}:${conf[SRC]}/" "${SYNC_TO}/current/"

# Create snapshot
lastest_l_snap=$(list_l_snap "${SYNC_TO}/current" | tail -n1)
lastest_l_snap=${lastest_l_snap:-"L_0"}
if [ $((${lastest_l_snap#L_}+${KEEP_SECONDS})) -lt $EPOCH ] \
        && [ ${conf[KEEP_LONG_COUNT]} -gt 0 ]; then
    btrfs subvol snapshot -r "${SYNC_TO}/current" "${SYNC_TO}/L_$EPOCH"
else
    btrfs subvol snapshot -r "${SYNC_TO}/current" "${SYNC_TO}/S_$EPOCH"
fi

# Clean long-time snapshots
list_l_snap "${SYNC_TO}/current" \
    | head -n-${conf[KEEP_LONG_COUNT]} \
        | while read subvol; do
    msg "Delete old backup ${subvol}."
    btrfs subvolume delete "${SYNC_TO}/${subvol}"
done

# Clean short-time snapshots
list_s_snap "${SYNC_TO}/current" | while read subvol; do
    if [ ${subvol#S_} -lt $((EPOCH-$KEEP_SECONDS)) ]; then
        msg "Delete old backup ${subvol}."
        btrfs subvolume delete "${SYNC_TO}/${subvol}"
    fi
done

